return终止函数运行并返回
function提升，声明变量提升（var）（赋值不提升），function优先级比var高
var xx = 99;
function a(){
	alert(xx);
	var xx = 100;
}
a(); //undefined
var xx = 3;
function xx() {};
alert( typeof xx ); //number
字符串+数字  数字转为字符串
1+2+3+“4”=“64”
this的指向、、
go()  全局
bar.zoo()


用户定义对象：自己写的
内建对象：Js提供的 数组、math、date
宿主对象：浏览器提供的预定义对象 form image element

window.open(url,name,features)
//name 必须为'__blank'否则可能不打开新页面

window.blur()
	function popUp(winURL){
	  window.open(winURL,'popup','width=320')
	}
	<a href='javascript:popUp('www.baidu.com')'>伪协议，平稳退化实现不能</a>	
	<a href='http://www.baidu.com/' onclick="popUp(this.href;return false)"> 这就好了嘛</a>	

scrollBtoom :
$ScrollBottom = $(doc).height() - $(win).height() - $(win).scrollTop();

title图标 16*16
标题栏：
<link rel="icon" href="ico地址" type="image/x-icon">
收藏夹：
<link rel="shortcut icon" href="ico地址" type="image/x-icon">


复杂逻辑判断
const actions = {
  'guest_1':()=>{/*do sth*/},
  'guest_2':()=>{/*do sth*/},
  //....
}

const onButtonClick = (identity,status)=>{
  let action = actions[`${identity}_${status}`] || actions['default']
  action.call(this)
}

ajax.then()
then函数的第一个参数是成功之后执行的函数，第二个参数是失败之后执行的函数。而且then函数还可以链式连接。
var ajax = $.ajax('data.json')
ajax.then(function () {
    console.log('success 1')
}, function () {
    console.log('error 1')
}).then(function () {
    console.log('success 2')
}, function () {
    console.log('error 2')
})


双向绑定
var data = {};
const input = document.getElementById('input');
Object.defineProperty(data, 'text', {
    set(value) {
        input.value = value;
	this.value = value;
    }
});
    
input.oninput = function(e) {
    data.text = e.target.value;
}
//oninput 事件在元素值发生变化是立即触发， onchange 在元素失去焦点时触发


数组全排列
function permute(input) {
    var permArr = [],
    usedChars = []; 
    function main(input){
      var i, ch;
      for (i = 0; i < input.length; i++) {
        ch = input.splice(i, 1)[0]; 
        usedChars.push(ch);
        if (input.length == 0) {
          permArr.push(usedChars.slice());
        }
        main(input);
        input.splice(i, 0, ch);
        usedChars.pop();
    }
    return permArr
  }
  return main(input);
};
console.log(permute([0, 1, 2, 3]));

SEO：
<title>Apple (中国大陆) - 官方网站</title>
<meta name='description' content='探索 Apple 充满创新的世界，选购各式 iPhone、iPad、Apple Watch 和 Mac，浏览各种配件、娱乐产品，并获得相关产品的专家支持服务。'></meta>
<meta name='Keywords' content='苹果官网, Apple官网, 苹果中国, Apple中国'></meta>
合理的title、description、keywords：搜索对这三项的权重逐个减小，title强调重点，关键词不超过2次，而且要靠前，不同页面title要有所不同；description把页面内容高度概括，长度合适，不可过分堆砌关键词，不同页面description有所不同；keywords列举出重要关键词即可
重要内容HTML代码放在最前：搜索引擎抓取HTML顺序是从上到下，有的搜索引擎对抓取长度有限制，保证重要内容一定会被抓取
重要内容不要用js输出：爬虫不会执行js获取内容;少用iframe：搜索引擎不会抓取iframe中的内容
非装饰性图片必须加alt

会话跟踪：
cookie
session
url重写
隐藏input
ip地址
webStorage

es6 array.includes(item) 代替 array.indexOf(item) !== -1
判断是否存在
if ('nonExistingProp' in object) {
  // ...
}
代替
if (object.nonExistingProp === undefined) {
  // ...
}

const defaultProps = {
  optionalProp1: 'Default value 1'
};
代替
if (object.optionalProp1 === undefined) {
  object.optionalProp1 = 'Default value 1';
}

function foo(param1, param2 = 'Some default value') {
  // ...
}
代替
function foo(param1, param2) {
  if (param2 === undefined) {
    param2 = 'Some default value';
  }
  // ...
}

双向绑定原理
var data = {};
const input = document.getElementById('input');
Object.defineProperty(data, 'text', {
  set(value) {
    input.value = value;
    this.value = value;
    console.log(data);
  }
});
input.oninput = function(e) {
  data.text = e.target.value;
}

数组全排列
function permute(input) {
  var permArr = [],
  usedChars = []; 
  function main(input){
    var i, ch;
    for (i = 0; i < input.length; i++) {
      ch = input.splice(i, 1)[0]; 
      usedChars.push(ch);
      if (input.length == 0) {
	permArr.push(usedChars.slice());//return new
      }
      main(input);
      input.splice(i, 0, ch);
      usedChars.pop(); //qu wei
    }
    return permArr
  }
  return main(input);
};
console.log(permute([0, 1, 2, 3]));

apply
function Person(name,age) {
	this.name=name;
	this.age=age;
}
/*定义一个学生类*/  
functionStudent(name,age,grade) {
	Person.apply(this,arguments);
	this.grade=grade;
}
//创建一个学生类  
var student=new Student("zhangsan",21,"一年级");
//student.name zhangsan

防抖 超过指定间隔的时候，任务才会执行，避免频繁操作 搜索框搜索
function debounce(fn,time){
    let timer = null;
    return function(){
        if(timer){
            clearTimeout(timer)
        }
        timer = setTimeout(()=>{
            fn.apply(this,arguments)
        },time)
    }
}
节流  在指定的时间间隔内只执行一次 scroll事件
function throttle(fn,time){
    let canRun = true;
    return function(){
        if(!canRun){
            return
        }
        canRun = false;
        setTimeout(() => {
            fn.apply(this,arguments);
            canRun = true;
        },time)
    }
}


	flat 数组拉平
	let ary = [1, [2, [3, [4, 5]]], 6];
	console.log(ary.flat());  // [1,2,arr,6]
	flat(0) 不进行操作;
	flat(1) [1,2,arr,6];
	flat(Infinity) 拉平所有;
	
	reduce为数组中的每一个元素依次执行回调函数 (累加，累乘)
	var arr = [1, 2, 3, 4];
	var sum = arr.reduce(function(prev, cur, index, arr) {
	    return prev + cur;
	})
